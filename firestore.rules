rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function userHasUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function userHasFullUserData() {
      let data = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return ("accountType" in data)
             && ("username" in data);
    }
    
    match /users/{targetUid} {
      // There's no sensitive info yet so anyone logged in can read any other account.
      allow read: if request.auth != null;

      // Can only be done by the same user.
      allow create: if request.auth != null
                            && targetUid == request.auth.uid
                            && (
                              (!request.resource.data.keys().hasAny(["accountType"])
                               || (request.resource.data.accountType == "student" || request.resource.data.accountType == "teacher"))
                              && (!request.resource.data.keys().hasAny(["username"])
                               || !(request.resource.data.username == "" || request.resource.data.username.size() > 72))
                            );

      allow update: if request.auth != null
                            && targetUid == request.auth.uid
                            && (
                              (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["accountType"])
                               || (request.resource.data.accountType == "student" || request.resource.data.accountType == "teacher"))
                              && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["username"])
                               || !(request.resource.data.username == "" || request.resource.data.username.size() > 72))
                            );

      allow delete: if false; // TODO: implement account deletion
    }

    match /courses/{targetCourseId} {
      function isTeacher() {
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.accountType == "teacher";
      }

      function isStudent() {
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.accountType == "student";
      }

      function isIncludedInTeachers() {
        return resource.data == request.auth.uid || exists(/databases/$(database)/documents/courses/$(targetCourseId)/teachers/$(request.auth.uid));
      }

      function isIncludedInStudents() {
        return exists(/databases/$(database)/documents/courses/$(targetCourseId)/students/$(request.auth.uid));
      }

      match /students/{targetStudentId} {
        allow read: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData();

        allow create, update: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isStudent()
                    && request.auth.uid == targetStudentId;
        
        allow delete: if request.auth != null
                      && userHasUserData()
                      && userHasFullUserData()
                      && isStudent()
                      && isIncludedInStudents()
                      && request.auth.uid == targetStudentId;
      }

      match /teachers/{targetTeacherId} {
        allow read: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData();

        allow create, update: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher()
                    && request.auth.uid == targetTeacherId;
        
        allow delete: if request.auth != null
                      && userHasUserData()
                      && userHasFullUserData()
                      && isTeacher()
                      && isIncludedInTeachers()
                      && request.auth.uid == targetTeacherId;
      }

      allow read: if request.auth != null
                  && userHasUserData()
                  && userHasFullUserData();

      allow create: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher()
                    && request.resource.data.keys().hasAll(["courseCode", "courseName", "owner"])
                    && request.resource.data.courseCode is string && request.resource.data.courseCode != "" && request.resource.data.courseCode.size() <= 10
                    && request.resource.data.courseCode is string && request.resource.data.courseName != "" && request.resource.data.courseName.size() <= 72
                    && request.resource.data.owner is string && request.auth.uid == request.resource.data.owner;

      allow update: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && (
                      (
                        isTeacher()
                        && isIncludedInTeachers()
                        && (
                          !request.resource.data.diff(resource.data).affectedKeys().hasAny(["owner"])
                          || (request.auth.uid == resource.data.owner)
                        )
                      )
                      // || (
                      //   isStudent()
                      //   && !request.resource.data.diff(resource.data).affectedKeys().hasAny(["owner", "teachers"])
                      //   && (
                      //     !request.resource.data.diff(resource.data).affectedKeys().hasAny(["students"])
                      //     || (
                      //       request.resource.data.students.size() == resource.data.students.size() + 1
                      //       && !resource.data.students.hasAny([request.auth.uid])
                      //       && request.resource.data.students.hasAll(resource.data.students)
                      //       && request.resource.data.students.hasAll([request.auth.uid])
                      //     )
                      //     || (
                      //       request.resource.data.students.size() == resource.data.students.size() - 1
                      //       && resource.data.students.removeAll(request.resource.data.students)[0] == request.auth.uid
                      //     )
                      //   )
                      // )
                    );
      allow delete: if request.auth.uid == resource.data.owner;
    }
  }
}
