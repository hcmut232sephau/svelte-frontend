rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function userHasUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function userHasFullUserData() {
      let data = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return ("accountType" in data)
             && ("username" in data);
    }
    
    match /users/{targetUid} {
      // There's no sensitive info yet so anyone logged in can read any other account.
      allow read: if request.auth != null;

      // Can only be done by the same user.
      allow create: if request.auth != null
                            && targetUid == request.auth.uid
                            && (
                              (!request.resource.data.keys().hasAny(["accountType"])
                               || (request.resource.data.accountType == "student" || request.resource.data.accountType == "teacher" || request.resource.data.accountType == "unset"))
                              && (!request.resource.data.keys().hasAny(["username"])
                               || !(request.resource.data.username == "" || request.resource.data.username.size() > 72))
                              && (!request.resource.data.keys().hasAny(["bio"])
                               || !(request.resource.data.bio.size() > 2048))
                              && (!request.resource.data.keys().hasAny(["degree"])
                               || !(request.resource.data.degree.size() > 2048))
                            );

      allow update: if request.auth != null
                            && targetUid == request.auth.uid
                            && (
                              (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["accountType"])
                               || (request.resource.data.accountType == "student" || request.resource.data.accountType == "teacher" || request.resource.data.accountType == "unset"))
                              && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["username"])
                               || !(request.resource.data.username == "" || request.resource.data.username.size() > 72))
                              && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["bio"])
                               || !(request.resource.data.bio.size() > 2048))
                              && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["degree"])
                               || !(request.resource.data.degree.size() > 2048))
                            );

      allow delete: if false; // TODO: implement account deletion
    }

    match /courses/{targetCourseId} {
      function isTeacher() {
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.accountType == "teacher";
      }

      function isStudent() {
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.accountType == "student";
      }

      function isIncludedInStudents() {
        return exists(/databases/$(database)/documents/courses/$(targetCourseId)/students/$(request.auth.uid));
      }

      match /students/{targetStudentId} {
        allow read: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData();

        allow create, update: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isStudent()
                    && request.auth.uid == targetStudentId;
        
        allow delete: if request.auth != null
                      && userHasUserData()
                      && userHasFullUserData()
                      && isStudent()
                      && isIncludedInStudents()
                      && request.auth.uid == targetStudentId;
      }

      match /schedules/{targetScheduleId} {
        allow read: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData();

        allow write: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher();
      }

      match /notes/{targetNoteId} {
        allow read: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData();

        allow write: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher();
      }

      allow read: if request.auth != null
                  && userHasUserData()
                  && userHasFullUserData();

      allow create: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher()
                    && request.resource.data.keys().hasAll(["courseCode", "courseName", "teacher"])
                    && request.resource.data.courseCode is string && request.resource.data.courseCode != "" && request.resource.data.courseCode.size() <= 10
                    && request.resource.data.courseCode is string && request.resource.data.courseName != "" && request.resource.data.courseName.size() <= 72
                    && request.resource.data.teacher is string && request.auth.uid == request.resource.data.teacher;

      allow update: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher()
                    && request.auth.uid == resource.data.teacher;

      allow delete: if request.auth.uid == resource.data.teacher;
    }
  }
}
