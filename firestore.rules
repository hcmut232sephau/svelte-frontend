rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function userHasUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function userHasFullUserData() {
      let data = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return ("accountType" in data)
             && ("username" in data);
    }

    // Reading user data
    // There's no sensitive info yet so anyone logged in can read any other account.
  	match /users/{targetUid} {
      allow read: if request.auth != null;
    }

    // Writing user data
    // Can only be done by the same user.
    match /users/{targetUid} {
      allow create, update: if request.auth != null
                            && targetUid == request.auth.uid
                            && (
                              (!("accountType" in request.resource.data)
                               || (request.resource.data.accountType == "student" || request.resource.data.accountType == "teacher"))
                              && (!("username" in request.resource.data)
                               || !(request.resource.data.username == "" || request.resource.data.username.size() > 72))
                            );

      allow delete: if false; // TODO: implement account deletion
    }

    // Reading courses
    match /courses/{targetCourseId} {
      allow read: if request.auth != null
                  && userHasUserData()
                  && userHasFullUserData()
                  && (request.auth.uid in resource.data.teachers);
    }

    // Writing courses
    // TODO
    match /courses/{targetCourseId} {
      function isTeacher() {
        let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userData.accountType == "teacher";
      }

      function isIncludedInTeachers() {
        let courseData = get(/databases/$(database)/documents/courses/$(targetCourseId)).data;
        return ("teachers" in courseData)
               && (request.auth.uid in courseData.teachers);
      }

      allow create: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher()
                    && "courseCode" in request.resource.data
                    && request.resource.data.courseCode != "" && request.resource.data.courseCode.size() <= 10
                    && "courseName" in request.resource.data
                    && request.resource.data.courseName != "" && request.resource.data.courseName.size() <= 72
                    && "teachers" in request.resource.data
                    && request.resource.data.teachers.size() == 1
                    && request.auth.uid in request.resource.data.teachers;
      allow update: if request.auth != null
                    && userHasUserData()
                    && userHasFullUserData()
                    && isTeacher()
                    && isIncludedInTeachers();
    }
  }
}
